@namespace UteamUP.Client.Components.Inputs
@using System.Text.RegularExpressions
@inherits InputBase<List<string>>

<div class="input-container">
    @if (!string.IsNullOrEmpty(Label))
    {
        <label class="form-label">@Label</label>
    }

    <div class="input-chip-wrapper">
        <div class="root">
            @foreach (var item in Value)
            {
                <div class="chip">
                    @item
                    <span class="chip-close" @onclick="(() => RemoveItem(item))">
                        &times;
                    </span>
                </div>
            }
            <input @onkeyup="OnKeyDown" @onblur="OnBlur" type="text" @oninput="(e) => _inputValue = (string)e.Value" value="@BindConverter.FormatValue(_inputValue)" />
        </div>
    </div>
</div>

@code {
    private string _inputValue;

    [Parameter]
    public string Label { get; set; }
    
    private void OnBlur(FocusEventArgs e) => ValidateEnteredItem();

    private void ValidateEnteredItem()
    {
        //_inputValue = Regex.Replace(_inputValue, @"\s+", "");
        
        // Check if the input value is empty or already exists in the list
        if (string.IsNullOrEmpty(_inputValue) || Value.Contains(_inputValue))
        {
            _inputValue = null;
            return;
        }

        Value.Add(_inputValue);
        
        _inputValue = null;
    }
    
    private void OnKeyDown(KeyboardEventArgs e)
    {
        if(e.Key == "Backspace" && string.IsNullOrEmpty(_inputValue))
        {
            Value.RemoveAt(Value.Count - 1);
        }
        
        if(e.Key == "Tab" || e.Key == "Enter" || e.Key == ",")
        {
            ValidateEnteredItem();
        }
    }

    protected override bool TryParseValueFromString(string value, [MaybeNullWhen(false)] out List<string> result, [NotNullWhen(false)] out string validationErrorMessage)
    {
        throw new NotImplementedException();
    }
    
    private void RemoveItem(string item)
    {
        Value.Remove(item);
    }
}
