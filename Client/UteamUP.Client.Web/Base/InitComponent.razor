@namespace UteamUP.Client.Web.Base

@inject IAccessTokenProvider AccessTokenProvider
@inject AuthorizationComponentBase authBase
@inject HttpClient Http
@inject NavigationManager InitNavigation

@inject UserComponentBase userBase
@inject TenantsComponentBase tenantBase
@inject ILogger<InitComponent> Logger

@using System.Net.Http.Headers

@using Blazored.Toast.Services
@inject IToastService toastService

@using AccessToken = Microsoft.AspNetCore.Components.WebAssembly.Authentication.AccessToken
@using LogLevel = Microsoft.Extensions.Logging.LogLevel
@inherits UteamupComponentBase

<AuthorizeView>
    <Authorized>
        <p>@GlobalState.Value.Name</p>
        <p>@GlobalState.Value.Oid</p>
    </Authorized>
    <NotAuthorized>
        <p>You must be signed in to see this content.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    public bool ErrorFlag = false;
    public string ErrorMessage = "";

    string _oid = "";
    string _name = "";
    string? _email = "";

    bool _userActivated = false;
    bool _userHasDatabase = false;
    bool _userFirstLogin = false;
    bool _userHasTenants = false;
    bool _userHasInvites = false;

    List<TenantDto>? _tenants = new();
    List<InvitedUserDto>? _invites = new();

    private async Task<AuthenticationHeaderValue> GetAuthenticationHeaderAsync()
    {
        AccessToken token;
        
        var tokenResult = await AccessTokenProvider.RequestAccessToken();

        if (tokenResult.TryGetToken(out token))
        {
            Logger.Log(LogLevel.Information, $"Token: {token.Value}");
            return new AuthenticationHeaderValue("Bearer", token.Value);
        }
        
        Logger.Log(LogLevel.Error, $"Unable to obtain an access token.");
        throw new InvalidOperationException("Unable to obtain an access token.");
    }

    private async Task GetTenantInvites(string email)
    {
        var authHeader = await GetAuthenticationHeaderAsync();
        Logger.Log(LogLevel.Information, "Requesting Token");
            
        Http.DefaultRequestHeaders.Authorization = authHeader;

        var url = $"api/tenant/invite/{email}";
        Logger.Log(LogLevel.Information, $"Requesting invites to email: {url}");
        var tenantInvites = await Http.GetFromJsonAsync<List<InvitedUser>>(url);

        
        if (tenantInvites.Count >= 1)
        {
            Logger.Log(LogLevel.Information, $"User has invites to tenants: {tenantInvites.Count}");
            _userHasInvites = await tenantBase.SetHasTenantInvites(true, tenantInvites);
        }
    }

    private async Task GetTenants(string oid)
    {
        
        var authHeader = await GetAuthenticationHeaderAsync();
        Http.DefaultRequestHeaders.Authorization = authHeader;

        var url = $"api/tenant/oid/{oid}";
        Logger.Log(LogLevel.Information, $"Requesting tenants for: {url}");

        var tenants = await Http.GetFromJsonAsync<List<Tenant>>(url);
        
        _userHasTenants = await tenantBase.SetTenantsDetails(tenants);
        if(_userHasTenants)
        {
            Logger.Log(LogLevel.Information, $"User has tenants: {_userHasTenants}");
        }
        else
        {
            Logger.Log(LogLevel.Information, $"User has no tenants: {_userHasTenants}");
        }
    }

    private async Task GetUser(string oid, string name, string email)
    {
        if (string.IsNullOrEmpty(oid))
        {
            Logger.Log(LogLevel.Error, $"Recieved a empty OID, please contact support.");
            toastService.ShowError("Recieved a empty OID, please contact support.");
            return;
            //throw new ArgumentNullException(nameof(oid));
        }
            
        
        // Try to get API from the UteamUP.Server.Api and the controller GetByOidAsync
        var authHeader = await GetAuthenticationHeaderAsync();
        Http.DefaultRequestHeaders.Authorization = authHeader;

        var url = $"api/user/oid/{oid}";
        
        Logger.Log(LogLevel.Information, $"Requesting user details for: {url}");
        var user = await Http.GetFromJsonAsync<MUser>(url);

        // If the user is not in the database, then add the user to the database        
        if (string.IsNullOrWhiteSpace(user.Oid))
        {
            Logger.Log(LogLevel.Information, $"User is not in the database, adding user: {name}");
            
            var _userDto = new MUserDto();
            _userDto.Name = name;
            _userDto.Oid = oid;
            _userDto.Email = email;

            var urlPost = $"api/user";
            var response = await Http.PostAsJsonAsync(urlPost, _userDto);

            if (!response.IsSuccessStatusCode)
            {
                // TODO: Here I need to handle error such as make a popup modal to show the error
                
                Logger.Log(LogLevel.Error, $"The user {_userDto.Name} was not created");
            }
        }
        else
        {
            // Check if the user is activated
            _userFirstLogin = await userBase.SetUserFirstLoginAction(user.IsFirstLogin);
            Logger.Log(LogLevel.Information, $"Checking if the user is first login: {user.IsFirstLogin}");
            
    // Check if the user is first login
            _userActivated = await userBase.SetUserActivateDetails(user.HasBeenActivated);
            Logger.Log(LogLevel.Information, $"Checking if the user is activated: {user.HasBeenActivated}");

    // Let know that the user has database
            _userHasDatabase = await userBase.SetUserDatabaseDetails(true);
            Logger.Log(LogLevel.Information, $"Checking if the user has database: {_userHasDatabase}");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        // Check if Global State has already been initalized, if so then return
        //if (GlobalState != null)
        //    return;

        var isAuthorized = await authBase.SetUserDetails();
        Logger.Log(LogLevel.Information, $"Checking if the user is authorized: {isAuthorized}");
        
        if (!isAuthorized)
            InitNavigation.NavigateTo("/login");

        if (GlobalState.Value.Oid != null)
        {
            Logger.Log(LogLevel.Information, $"Global State is not null, get values: {GlobalState.Value.Oid}"); 
            _oid = GlobalState.Value.Oid;
            _name = GlobalState.Value.Name;
            _email = GlobalState.Value.Email;
            Logger.Log(LogLevel.Information, $"Global State is not null, get values: {_oid} {_name} {_email}");
        }
        else
        {
            // TODO: Here I need to handle error such as make a popup modal to show the error
            Logger.Log(LogLevel.Error, $"Could not get the OID from the Global State, try to login again or contact support.");
            toastService.ShowError("The OID is empty");
            return;
        }

    // Check if the user is in the database
        //await GetUser(_oid, _name, _email);

    // Check if the user has any tenants
        //await GetTenants(_oid);

    // If the user does not have any tenant, check if the user has a invite to a tenant
        //await GetTenantInvites(_email);

    // If the user does not have any tenant, check if the user has a invite to a tenant

    // If the user has a tenant, redirect to the overview page, and select the users default tenant. If the user is activated then redirect to overview page.
    }

    private void InitalizeTenants()
    {
        StateHasChanged();
    }

    private void OnTenantsChanged(SetTenantsAction active)
    {
        InitalizeTenants();
    }

}