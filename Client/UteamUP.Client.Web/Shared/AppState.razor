@using System.Security.Cryptography
@using System.Text
@using System.IO
@using System.Text.Json
@using Blazor.SubtleCrypto

@using Blazored.LocalStorage
@using UteamUP.Shared.States
@using JsonSerializer = System.Text.Json.JsonSerializer
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILocalStorageService LocalStorageService
@inject ICryptoService Crypto


<CascadingValue Value="@myGlobal">
    @ChildContent
</CascadingValue>

@code {
    [Parameter] public RenderFragment ChildContent { get; set; }
    
    private string? username;
    private string? oid;
    private string? email;
    
    public GlobalState myGlobal { get; set; }

    public async Task<GlobalState> GetClaimsPrincipalData()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            var savedStateJson = await LocalStorageService.GetItemAsStringAsync("globalState");
            
            // Check if the savedState is null or empty
            if (!string.IsNullOrEmpty(savedStateJson))
            {
                // Load the savedState into the GlobalState
                GlobalState newGlobal = await LocalStorageService.GetItemAsync<GlobalState>("globalState");
                //GlobalState newGlobal = await Crypto.DecryptAsync<GlobalState>(savedStateJson);
                
                Console.WriteLine("Loaded state for : " + newGlobal.Email);
                
                myGlobal = newGlobal;
                
                return myGlobal;
            }
            else
            {
                username = user.FindFirst("name")?.Value;
                oid = user.FindFirst("oid")?.Value;
                email = user.FindFirst("signInNames.emailAddress")?.Value;
                
                // Save the GlobalState to the local storage
                GlobalState newGlobal = new GlobalState { Name = username, Email = email, Oid = oid };
                
                // Encrypt GlobalState
                //var newGlobalEncrypted = await Crypto.EncryptAsync(newGlobal);
                
                // Convert newGlobal to json
                var newGlobalJson = JsonSerializer.Serialize(newGlobal);
                
                //await LocalStorageService.SetItemAsStringAsync("globalState", newGlobalEncrypted.Value);
                await LocalStorageService.SetItemAsStringAsync("globalState", newGlobalJson);
                Console.WriteLine("New state for : " + newGlobal.Email);
                
                myGlobal = newGlobal;

                return myGlobal;
            }
        }
        else
        {
            StateHasChanged();

            return new GlobalState();
        }
    }

    protected override async void OnInitialized()
    {
        myGlobal = await this.GetClaimsPrincipalData();
        Console.WriteLine("Initialized for : " + myGlobal.Email);
    }
}