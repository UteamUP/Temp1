@page "/activate-user"
@using UteamUP.Client.Wizard.ActivateUser.Forms
@using UteamUP.Client.Components.Enums
@using UteamUP.Client.Web.Repository.Interfaces

@inject IUserWebRepository UserWebRepository

<Form Steps="@_steps"
      BackUrl="/global"
      ActiveStepIndex="@_activeStepIndex"
      Title="Create plan"
      OnClickBackButton="OnClickBackButton"
      OnClickContinueButton="OnClickContinueButtonAsync"
      OnClickSubmitButton="OnClickSubmitButtonAsync">
    @switch (_activeStepIndex)
    {
        case 0:
            <EditForm Model="@_model">
                <HorizonInput Label="Activation Number" Placeholder="Type in the activation number you got in email and click on submit" @bind-Value="@_model.ActivationNumber"/>
                <div>
                    <p>Did you not recieve your activation number, you can press "Resend Activation Code" to send it to your registered email. This will take a few minutes, you can either click on the link you get with the email or copy the code and paste it to this box and submit. If you have problem with activiating your account, please refer to support at this link <a href="mailto:support@uteamup.com?subject=Activation Issue - ref:@AppState.Oid">support</a></p>
                    <HorizonButton Appearance="ButtonAppearance.Secondary">Resend Activation Code</HorizonButton>
                </div>
            </EditForm>
            break;
        default:
            break;
    }
</Form>

@code {

    [CascadingParameter]
    public GlobalState? AppState { get; set; }

    string? _oid = "";
    string? _name = "";
    string? _email = "";

    AddNewActivateUserForm _model = new AddNewActivateUserForm();

    protected int _activeStepIndex = 0;

    private IDictionary<string, bool> _steps = new Dictionary<string, bool>()
    {
        { "Activation Information", false },
    };

    FluentValidationValidator? _fluentValidationValidator;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _oid = AppState?.Oid;
        _name = AppState?.Name;
        _email = AppState?.Email;

        _model.ActivationNumber = "";
    }

    private async Task OnClickSubmitButtonAsync()
    {
        Console.WriteLine("Submit button clicked");

    // Save create the plan and redirect to global page
        var results = await UserWebRepository.ActivateUser(_model.ActivationNumber, AppState.Oid);
        if (results == false)
            // TODO: Should popup an error box in the client
            throw new Exception("Could not activate the user");
        else
            NavigationManager.NavigateTo("/global");
    }

    private async Task OnClickContinueButtonAsync()
    {
        _steps[_steps.ElementAt(_activeStepIndex).Key] = true;
        _activeStepIndex = _activeStepIndex + 1;
    }

    private void OnClickBackButton()
    {
        _activeStepIndex = _activeStepIndex - 1;
    }

}