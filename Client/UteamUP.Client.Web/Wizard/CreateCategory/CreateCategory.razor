@page "/create-category"
@using UteamUP.Client.Wizard.ActivateUser.Forms
@using UteamUP.Client.Web.Repository.Interfaces
@using UteamUP.Client.Components.Enums

@inject IUserWebRepository UserWebRepository
@inject ICategoryWebRepository CategoryWebRepository

<Form
    BackUrl="/global"
    Title="Create Category"
>
    @switch (_activeStepIndex)
    {
        case 0:
            <HorizonChipInput Label="Categories" @bind-Value="_categoryNames"/>
            <HorizonButton Appearance="ButtonAppearance.Primary" OnClick="OnClickSubmitButtonAsync">Submit</HorizonButton>
            break;
        default:
            break;
    }
</Form>

@code {
    string? _oid = "";
    string? _name = "";
    string? _email = "";
    Tenant? _activeTenant;
    
    private List<string> _categoryNames = new();
    private List<CategoryDto> _categories = new();

    AddNewCategoryForm _model = new AddNewCategoryForm();

    protected int _activeStepIndex = 0;

    private IDictionary<string, bool> _steps = new Dictionary<string, bool>()
    {
        { "Category Names", false },
    };

    FluentValidationValidator? _fluentValidationValidator;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _oid = UserState.User.Oid;
        _name = UserState.User.Name;
        _email = UserState.User.Email;
        
        var globalState = await CustomAuthStateProvider.GetGlobalStateAsync();
        _activeTenant = globalState.ActiveTenant;
    }

    private async Task OnClickSubmitButtonAsync()
    {
        // Add _categoryNames to _categories
        foreach (var categoryName in _categoryNames)
        {
            _categories.Add(new CategoryDto()
            {
                Name = categoryName
            });
        }
        
        // Get ActiveTenant from localStorage
        var results = await CategoryWebRepository.CreateAsync(_categories, _activeTenant.Id);
        if (results == false)
            // TODO: Should popup an error box in the client
            throw new Exception("Could not activate the user");
        else
            NavigationManager.NavigateTo("/global");
    }

    private async Task OnClickContinueButtonAsync()
    {
        _steps[_steps.ElementAt(_activeStepIndex).Key] = true;
        _activeStepIndex = _activeStepIndex + 1;
    }

    private void OnClickBackButton()
    {
        _activeStepIndex = _activeStepIndex - 1;
    }

}