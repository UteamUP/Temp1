@page "/create-location"
@using UteamUP.Client.Wizard.ActivateUser.Forms
@using UteamUP.Client.Components.Enums
@using UteamUP.Client.Web.Repository.Interfaces

@inject IUserWebRepository UserWebRepository

<Form Steps="@_steps"
      BackUrl="/global"
      ActiveStepIndex="@_activeStepIndex"
      Title="Create Location"
      OnClickBackButton="OnClickBackButton"
      OnClickContinueButton="OnClickContinueButtonAsync"
      OnClickSubmitButton="OnClickSubmitButtonAsync">
    @switch (_activeStepIndex)
    {
        case 0:
            <EditForm Model="@_model">
                <HorizonInput Label="Location Name" Placeholder="Type in the name of the location" @bind-Value="@_model.LocationName"/>
            </EditForm>
            break;
        case 1:
            <EditForm Model="@_model">
                <h2>Location Description</h2>
                <div class="input-container">
                    <label class="form-label">Description</label>
                    <HorizonRichTextEditor Height="300px">
                        <EditorContent>
                            @((MarkupString)@_model.LocationDescription)
                        </EditorContent>
                    </HorizonRichTextEditor>
                </div>
            </EditForm>
            break;
        default:
            break;
    }
</Form>

@code {
    string? _oid = "";
    string? _name = "";
    string? _email = "";

    AddNewLocationForm _model = new AddNewLocationForm();

    protected int _activeStepIndex = 0;

    private IDictionary<string, bool> _steps = new Dictionary<string, bool>()
    {
        { "Location Basic Information", false },
        { "Location Details", false },
    };

    FluentValidationValidator? _fluentValidationValidator;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _oid = UserState.User.Oid;
        _name = UserState.User.Name;
        _email = UserState.User.Email;

        _model.LocationName = "";
    }

    private async Task OnClickSubmitButtonAsync()
    {
        Console.WriteLine("Submit button clicked");

    // Save create the plan and redirect to global page
        //var results = await UserWebRepository.ActivateUser(_model.ActivationNumber, UserState.User.Oid);
        //if (results == false)
            // TODO: Should popup an error box in the client
        //    throw new Exception("Could not activate the user");
        //else
        //    NavigationManager.NavigateTo("/global");
    }

    private async Task OnClickContinueButtonAsync()
    {
        _steps[_steps.ElementAt(_activeStepIndex).Key] = true;
        _activeStepIndex = _activeStepIndex + 1;
    }

    private void OnClickBackButton()
    {
        _activeStepIndex = _activeStepIndex - 1;
    }

}