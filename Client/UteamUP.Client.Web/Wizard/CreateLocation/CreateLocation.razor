@page "/create-location"
@using UteamUP.Client.Wizard.ActivateUser.Forms
@using UteamUP.Client.Components.Enums
@using UteamUP.Client.Web.Repository.Interfaces

@inject IUserWebRepository UserWebRepository
@inject ITagWebRepository TagWebRepository
@inject ILocationWebRepository LocationWebRepository
@inject ITenantWebRepository TenantWebRepository

<Form Steps="@_steps"
      BackUrl="/global"
      ActiveStepIndex="@_activeStepIndex"
      Title="Create Location"
      OnClickBackButton="OnClickBackButton"
      OnClickContinueButton="OnClickContinueButtonAsync"
      OnClickSubmitButton="OnClickSubmitButtonAsync">
    @switch (_activeStepIndex)
    {
        case 0:
            <EditForm Model="@_model">
                <HorizonInput Label="Location Name" Placeholder="Type in the name of the location" @bind-Value="@_model.Name"/>
                <HorizonChipTag Label="Tags" @bind-Value="_tagNames" Placeholder="Type in the tags you want to add to the location"/>
            </EditForm>
            break;
        case 1:
            <EditForm Model="@_model">
                <h2>Location Description</h2>
                <div class="input-container">
                    <label class="form-label">Description</label>
                    <HorizonRichTextEditor Height="300px">
                        <EditorContent>
                            @((MarkupString)@_model.Description)
                        </EditorContent>
                    </HorizonRichTextEditor>
                </div>
            </EditForm>
            break;
        default:
            break;
    }
</Form>

@code {
    private List<string> _tagNames = new List<string>();

    AddNewLocationForm _model = new AddNewLocationForm();
    int _tenantId = 0;

    protected int _activeStepIndex = 0;

    private IDictionary<string, bool> _steps = new Dictionary<string, bool>()
    {
        { "Location Basic Information", false },
        { "Location Details", false },
    };

    FluentValidationValidator? _fluentValidationValidator;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _model.Name = "Section One";
        _model.Description = "Section One Description";
        _tagNames.AddRange(new List<string>() { "TeamField 1", "TeamField 2", "TeamField 3" });
        _tenantId = UserState.User.DefaultTenantId;
    }

    private async Task OnClickSubmitButtonAsync()
    {
        Console.WriteLine("Submit button clicked");
        List<TagLocation> tagLocations = new List<TagLocation>();
        
        foreach (var tagName in _tagNames)
        {
            Tag tag = await TagWebRepository.GetOrCreateTagAsync(tagName, _tenantId);
            Console.WriteLine("Trying to create tags.");
            TagLocation tagLocation = new TagLocation();
            tagLocation.Tag = tag;
            tagLocations.Add(tagLocation);
        }


        LocationDto newLocation = new LocationDto();
        newLocation.Name = _model.Name;
        newLocation.Description = _model.Description;
        newLocation.TenantId = _tenantId;
        newLocation.TagLocations = tagLocations;

        var results = await LocationWebRepository.CreateLocationAsync(newLocation, _tenantId);
    }

    private async Task OnClickContinueButtonAsync()
    {
        _steps[_steps.ElementAt(_activeStepIndex).Key] = true;
        _activeStepIndex = _activeStepIndex + 1;
    }

    private void OnClickBackButton()
    {
        _activeStepIndex = _activeStepIndex - 1;
    }

}