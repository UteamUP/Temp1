@page "/create-invite"
@using UteamUP.Client.Web.Repository.Interfaces
@using UteamUP.Client.Web.Wizard.CreateTenantInvites.Forms

@inject IUserWebRepository UserWebRepository
@inject ITenantWebRepository TenantWebRepository

<Form Steps="@_steps"
      BackUrl="/global"
      ActiveStepIndex="@_activeStepIndex"
      Title="Create Tenant Invite"
      OnClickBackButton="OnClickBackButton"
      OnClickContinueButton="OnClickContinueButtonAsync"
      OnClickSubmitButton="OnClickSubmitButtonAsync">
    @switch (_activeStepIndex)
    {
        case 0:
            <EditForm Model="@_model">
            </EditForm>
            break;
        case 1:
            <EditForm Model="@_model">
            </EditForm>
            break;
        default:
            break;
    }
</Form>

@code {

    [CascadingParameter]
    public GlobalState? AppState { get; set; }

    string? _oid = "";
    string? _name = "";
    string? _email = "";

    AddNewTenantInviteForm _model;

    protected int _activeStepIndex = 0;

    private IDictionary<string, bool> _steps = new Dictionary<string, bool>()
    {
        { "Select Tenant", false },
        { "Add Invites to Tenant", false },
    };

    FluentValidationValidator? _fluentValidationValidator;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _oid = AppState?.Oid;
        _name = AppState?.Name;
        _email = AppState?.Email;

        // Get all the tenants for the user
        var tenants = await TenantWebRepository.GetTenantsForUserAsync(AppState.Oid, true);
    }

    private async Task OnClickSubmitButtonAsync()
    {
        Console.WriteLine("Submit button clicked");

    // Save create the plan and redirect to global page
        //var results = await UserWebRepository.ActivateUser(_model.ActivationNumber, AppState.Oid);
        //if (results == false)
        //    // TODO: Should popup an error box in the client
        //    throw new Exception("Could not activate the user");
        //else
        //    NavigationManager.NavigateTo("/global");
    }

    private async Task OnClickContinueButtonAsync()
    {
        _steps[_steps.ElementAt(_activeStepIndex).Key] = true;
        _activeStepIndex = _activeStepIndex + 1;
    }

    private void OnClickBackButton()
    {
        _activeStepIndex = _activeStepIndex - 1;
    }

}