@page "/location-add"
@page "/location-edit/{id:int?}"
@using UteamUP.Client.Web.WizardComponents.AddEditLocation.Modals
@using UteamUP.Client.Web.WizardComponents.AddEditLocation.Forms
@inject IWebRepository<Tag> TagWebRepository
@inject ILocationWebRepository LocationWebRepository
@inherits WizardBase<AddEditLocationForm>

<Form Steps="@_steps"
      BackUrl="/global"
      ActiveStepIndex="@_activeStepIndex"
      Title="@(Id == null ? "Create Location" : "Edit Location")"
      OnClickBackButton="OnClickBackButton"
      OnClickContinueButton="OnClickContinueButtonAsync"
      OnClickSubmitButton="OnClickSubmitButtonAsync">
    @switch (_activeStepIndex)
    {
        case 0:
            <EditForm Model="@_model.LocationBasicForm">
                <FluentValidationValidator @ref="_fluentValidationValidator" />
                <HorizonInput Label="Location Name" Placeholder="Type in the name of the location" @bind-Value="@_model.LocationBasicForm.Name"/>
            </EditForm>
            break;
        case 1:
            <EditForm Model="@_model.LocationAdditionalForm">
                <HorizonChipTag Label="Tags" @bind-Value="@_tagNames" Placeholder="Type in the tags you want to add to the location"/>
            </EditForm>
            break;
        case 2:
            <EditForm Model="@_model.LocationDetailsForm">
                <h2>Location Description</h2>
                <div class="input-container">
                    <label class="form-label">Description</label>
                    <HorizonRichTextEditor Height="300px">
                        <EditorContent>
                            @((MarkupString)_model.LocationDetailsForm.Description)
                        </EditorContent>
                    </HorizonRichTextEditor>
                </div>
            </EditForm>
            break;
        default:
            break;
    }
</Form>

@code {
    private List<string> _tagNames = new List<string>();
    private Location location = new Location();
    int _tenantId;
    
    protected override async Task OnInitializedAsync()
    {
        _model = new AddEditLocationForm();

        /*
        if (Id.HasValue)
        {
    // Search for the location based on the id
            location = await LocationWebRepository.GetByLocationId(Id.Value);
    //location = await LocationWebRepository.Get(Id.Value, "api/location");

            if (string.IsNullOrWhiteSpace(location.Name))
            {
    // Open modal and display error
                OpenModal("Error", "Location not found");
            }

    // Get the tags for the location
            var myTags = await LocationWebRepository.GetTagsByLocationId(Id.Value);
            
    // Push values to the model
            _model = Mapper.Map<AddEditLocationForm>(location);
            _model.LocationAdditionalForm.Tags = myTags;
            _tagNames.AddRange(myTags.Select(t => t.Name));
        }
        */
        
        _tenantId = UserState.User.DefaultTenantId;
        GenerateLocation(_tenantId);
    }
    
    private IDictionary<string, bool> _steps = new Dictionary<string, bool>()
    {
        { "Location Basic Information", false },
        { "Tags", false },
        { "Location Details", false },
    };

    private async Task<List<Tag>> GetTags(int tenantId)
    {
        List<Tag> tagList = new List<Tag>();
        
        foreach (var tagName in _tagNames)
        {
            try
            {
                var tag = await TagWebRepository.GetByNameAndTenantId(tagName, "api/tag", _tenantId);
                
                if (!string.IsNullOrWhiteSpace(tag.Name))
                {
                    tagList.Add(tag);
                }
                else
                {
                    // Create the tag
                    Tag newTag = new Tag();
                    newTag.Name = tagName;
                    newTag.TenantId = tenantId;
                    newTag.CreatedAt = DateTime.Now.ToUniversalTime();
                    newTag.UpdatedAt = DateTime.Now.ToUniversalTime();

                    var newTagResult = await TagWebRepository.Add(newTag, "api/tag");
                    if (!string.IsNullOrWhiteSpace(newTagResult.Name))
                    {
                        tagList.Add(newTagResult);
                    }
                }
            }
            catch (Exception e)
            {
                Console.WriteLine("Error: " + e.Message);
            }
        }
        return tagList;
    }

    private async Task OnClickSubmitButtonAsync()
    {
        
        // create a map between _model and location so we can send the location as a parameter
        location = Mapper.Map<Location>(_model);
        location.Description = _model.LocationDetailsForm.Description;
        if(UserState.User.DefaultTenantId != 0){
            location.TenantId = UserState.User.DefaultTenantId;
        }
        else
        {
            var tenant = UserState.User.Tenants.FirstOrDefault()!.Id;
            location.TenantId = tenant;
        }

        if (location.TenantId == 0)
        {
            // Refresh browser
            StateHasChanged();
            // Navigate back to the global page
            NavigationManager.NavigateTo("/location-add");
        }

    // Get the tags for the location
        Console.WriteLine("Location tenant Id: " + location.TenantId);
        Console.WriteLine("Location name: " + location.Name);
        Console.WriteLine("Location description: " + location.Description);

    // Create the location
        if (Id == null)
        {
            Console.WriteLine("Creating a new location");
            try
            {
                // map location to locationDto
                var locationDto = Mapper.Map<LocationDto>(location);
                
                var result = await LocationWebRepository.Create(locationDto);
                if (result != null)
                {
                    //var tags = await GetTags((int)location.TenantId);
                    //await MyLocationWebRepository.UpdateTagToLocationAsync(tags, result.Id);
                    NavigationManager.NavigateTo("/global");
                }
                else
                {
                    // Open modal and display error
                    OpenModal("ErrorDetails", "Location was not created. Please try again.");
                }
            }
            catch (Exception e)
            {
                OpenModal("ErrorDetails", "Error: " + e.Message);
            }
        }
        
        /*
        // Update the location
        else
        {
            Console.WriteLine("Id: " + Id.Value);

            try
            {
                var result = await LocationWebRepository.Update(location);
                if (result.Id != 0)
                {
                    //var tags = await GetTags((int)location.TenantId);
                    //await MyLocationWebRepository.UpdateTagToLocationAsync(tags, result.Id);
                    NavigationManager.NavigateTo("/global");
                }
                else
                {
                    OpenModal("ErrorDetails", "Location was not updated, please try again.");
                }
            }
            catch (Exception e)
            {
                OpenModal("ErrorDetails", "Error: " + e.Message);
            }
        }
        */

    }

    private void OpenModal(string ErrorTitle, string ErrorDetails)
    {
        var options = new ModalOptions()
        {
            DisableBackgroundCancel = true,
            HideCloseButton = false,
        };
        
        var parameters = new ModalParameters();
        parameters.Add(ErrorTitle, ErrorDetails);

        ModalService.Show<ErrorModal>("Error", parameters, options);
    }
    
    private void GenerateLocation(int tenantId)
    {
        _model.LocationBasicForm.Name = "Entrance1";
        _model.LocationDetailsForm.Description = "Entrance1 is the entrance to the building, it is where Elvis Presley entered the building.";
        _model.LocationBasicForm.TenantId = tenantId;
        _tagNames.AddRange(new List<string>() { "TeamField 1", "TeamField 2", "TeamField 3" });
    }
    
    private async Task OnClickContinueButtonAsync()
    {
        _steps[_steps.ElementAt(_activeStepIndex).Key] = true;
        _activeStepIndex = _activeStepIndex + 1;
    }

    private void OnClickBackButton()
    {
        _activeStepIndex = _activeStepIndex - 1;
    }
}

