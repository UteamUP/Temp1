@page "/location-add"
@page "/location-edit/{id:int?}"
@using UteamUP.Client.Web.WizardComponents.AddEditLocation.Modals
@using UteamUP.Client.Web.WizardComponents.AddEditLocation.Forms
@using Newtonsoft.Json
@using UteamUP.Client.Components.Enums
@inject IWebRepository<Tag> TagWebRepository
@inject IWebRepository<Location> LocationWebRepository
@inject ILocationWebRepository MyLocationWebRepository
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHeaderRepository _headerRepository
@inject IMapper Mapper

@inherits WizardBase<AddEditLocationForm>


<Form Steps="@_steps"
      BackUrl="/global"
      ActiveStepIndex="@_activeStepIndex"
      Title="@(Id == null ? "Create Location" : "Edit Location")"
      OnClickBackButton="OnClickBackButton"
      OnClickContinueButton="OnClickContinueButtonAsync"
      OnClickSubmitButton="OnClickSubmitButtonAsync">
    @switch (_activeStepIndex)
    {
        case 0:
            <EditForm Model="@_model.LocationBasicForm">
                <FluentValidationValidator @ref="_fluentValidationValidator"/>
                <HorizonInput Label="Location Name" Placeholder="Type in the name of the location" @bind-Value="@_model.LocationBasicForm.Name"/>
            </EditForm>
            break;
        case 1:
            <EditForm Model="@_model.LocationAdditionalForm">
                <HorizonChipTag Label="Tags" @bind-Value="@_tagNames" Placeholder="Type in the tags you want to add to the location"/>
            </EditForm>
            break;
        case 2:
            <EditForm Model="@_model.LocationDetailsForm">
                <div class="input-container">
                    <div class="rich-text-editor-container">
                        <div class="quill-container" style="height: 300px">
                            <BlazoredTextEditor @ref="@QuillHtml">
                                <ToolbarContent>
                                    <span class="ql-formats">
                                        <button class="ql-bold"></button>
                                        <button class="ql-italic"></button>
                                        <button class="ql-underline"></button>
                                        <button class="ql-strike"></button>
                                    </span>
                                    <span class="ql-formats">
                                        <button class="ql-image"></button>
                                        <button @onclick="OnClickBrowseAsync"><HorizonIcon Icon="@Icons.Attachment" Width="14" Height="14"/></button>
                                    </span>
                                </ToolbarContent>
                                <EditorContent>
                                    @((MarkupString)_description)
                                </EditorContent>
                            </BlazoredTextEditor>
                        </div>
                        <div class="buttons-container">
                            <br />
                            <InputFile multiple id="@_fileInputid" OnChange="@HandleOnChange"/>
                        </div>
                        @if (_uploadedFiles != null)
                            {
                                <ul>
                                    @foreach (var file in _uploadedFiles)
                                    {
                                        <li>
                                            <span>@file.Name - @file.Size bytes</span>
                                        </li>
                                    }
                                </ul>
                            }
                    </div>
                </div>
            </EditForm>

            break;
        default:
            break;
    }
</Form>

@code {
    private List<string?> _tagNames = new();
    private Location location = new();
    private string? _description;
    int _tenantId;

    BlazoredTextEditor QuillHtml;
    private string _fileInputid = Guid.NewGuid().ToString();
    private IReadOnlyList<IBrowserFile>? _uploadedFiles;
    public EventCallback<string> OnContentChange { get; set; }
    public EventCallback<IReadOnlyList<IBrowserFile>?> OnFileChange { get; set; }
    private IJSObjectReference _module;
    private async Task OnClickBrowseAsync() => await _module.InvokeVoidAsync("openFileDialog", _fileInputid);
    
    private void HandleOnChange(InputFileChangeEventArgs e)
    {
        _uploadedFiles = e.FileCount == 0 ? null : e.GetMultipleFiles(e.FileCount);

        OnFileChange.InvokeAsync(_uploadedFiles);
    }
    
    private async Task HandleTextChange(ChangeEventArgs e)
    {
        await OnContentChange.InvokeAsync(e.Value.ToString());
    }
    
    protected override async Task OnInitializedAsync()
    {
        _model = new AddEditLocationForm();
        Http.DefaultRequestHeaders.Authorization = await _headerRepository.GetHeaderAsync();

        if (Id.HasValue)
        {
            try
            {
    // Search for the location based on the id
                var result = await Http.GetAsync($"api/location/{Id.Value}");
                result.EnsureSuccessStatusCode();
                if (result.IsSuccessStatusCode)
                {
                    var content = await result.Content.ReadAsStringAsync().ConfigureAwait(false);
                    var response = JsonConvert.DeserializeObject<LocationTagDto>(content);
                    _model.LocationBasicForm.Name = response.Name;

                    _description = response.Description;

                    location = Mapper.Map<Location>(_model);

                    if (UserState.User.DefaultTenantId != 0)
                    {
                        location.TenantId = UserState.User.DefaultTenantId;
                    }

                    if (response.Tags != null)
                    {
                        _tagNames.AddRange(response.Tags.Select(t => t.Name));
                    }
                }
                else
                {
                    OpenModal("ErrorDetails", "Unable to read the tenant information.");
                }
            }
            catch (Exception e)
            {
                OpenModal("ErrorDetails", "Cannot open location, please try again later. Error : " + e.Message);
            }
        }

        _tenantId = UserState.User.DefaultTenantId;
    //GenerateLocation(_tenantId);
    }

    private IDictionary<string, bool> _steps = new Dictionary<string, bool>()
    {
        { "Location Basic Information", false },
        { "Tags", false },
        { "Location Details", false }
    };

    private async Task OnClickSubmitButtonAsync()
    {
        _description = await QuillHtml.GetHTML();
        StateHasChanged();

        // create a map between _model and location so we can send the location as a parameter
        location.Name = _model.LocationBasicForm.Name;
        location.Description = _description;
        _model.LocationDetailsForm.Description = _description;

        if (UserState.User.DefaultTenantId != 0)
        {
            location.TenantId = UserState.User.DefaultTenantId;
        }
        else
        {
            var tenant = UserState.User.Tenants.FirstOrDefault()!.Id;
            location.TenantId = tenant;
        }

        if (location.TenantId == 0)
        {
            // Refresh browser
            StateHasChanged();
            // Navigate back to the global page
            NavigationManager.NavigateTo("/location-add");
        }

        // Get the tags for the location
        Console.WriteLine("Location tenant Id: " + location.TenantId);
        Console.WriteLine("Location name: " + location.Name);
        Console.WriteLine("Location description: " + location.Description);

        // Create the location
        if (Id == null)
        {
            Console.WriteLine("Creating a new location");
            try
            {
                // map location to locationDto
                var locationDto = new LocationDto();

                locationDto.Name = location.Name;
                locationDto.Description = _description;
                locationDto.TenantId = (int)location.TenantId;
                

                locationDto.Tags = _tagNames;
                var result = await Http.PostAsJsonAsync<LocationDto>($"api/location", locationDto);

                if (result != null)
                {
                    NavigationManager.NavigateTo("/global");
                }
                else
                {
    // Open modal and display error
                    OpenModal("ErrorDetails", "Location was not created. Please try again.");
                }
            }
            catch (Exception e)
            {
                OpenModal("ErrorDetails", "Error: " + e.Message);
            }
        }


        // Update the location
        else
        {
            try
            {
                var locationDto = new LocationDto();
                
                locationDto.Tags = _tagNames;

                locationDto.Name = _model.LocationBasicForm.Name;
                locationDto.Description = _model.LocationDetailsForm.Description;
                locationDto.TenantId = (int)location.TenantId;
                
                // Print out the locationDto.Tags in json format
                Console.WriteLine("LocationDto.Tags: " + JsonConvert.SerializeObject(locationDto.Tags));
                
                var result = await Http.PutAsJsonAsync<LocationDto>($"api/location/{Id.Value}", locationDto);
    
                if (result != null)
                {
                    NavigationManager.NavigateTo("/global");
                }
                else
                {
                    OpenModal("ErrorDetails", "Location was not updated, please try again.");
                }
            }
            catch (Exception e)
            {
                OpenModal("ErrorDetails", "Error: " + e.Message);
            }
        }
    }

    private void OpenModal(string ErrorTitle, string ErrorDetails)
    {
        var options = new ModalOptions()
        {
            DisableBackgroundCancel = true,
            HideCloseButton = false
        };

        var parameters = new ModalParameters();
        parameters.Add(ErrorTitle, ErrorDetails);

        ModalService.Show<ErrorModal>("Error", parameters, options);
    }

    private void GenerateLocation(int tenantId)
    {
        _model.LocationBasicForm.Name = "Entrance1";
        _model.LocationDetailsForm.Description = "Entrance1 is the entrance to the building, it is where Elvis Presley entered the building.";
        _model.LocationBasicForm.TenantId = tenantId;
        _tagNames.AddRange(new List<string>() { "TeamField 1", "TeamField 2", "TeamField 3" });
    }

    private async Task OnClickContinueButtonAsync()
    {
        _steps[_steps.ElementAt(_activeStepIndex).Key] = true;
        _activeStepIndex = _activeStepIndex + 1;
    }

    private void OnClickBackButton()
    {
        _activeStepIndex = _activeStepIndex - 1;
    }

}