@page "/tenant-add"
@page "/tenant-edit/{id:int?}"
@using UteamUP.Client.Web.WizardComponents.AddEditTenant.AddEditTenant.Modals
@using UteamUP.Client.Web.WizardComponents.AddEditTenant.AddEditTenant.Forms
@using Newtonsoft.Json

@inject IWebRepository<Tenant> TenantWebRepository
@inject ITenantWebRepository MyTenantWebRepository
@inject ISubscriptionWebRepository MySubscriptionWebRepository
@inject IPlanWebRepository PlanWebRepository
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHeaderRepository _headerRepository
@inject IMapper Mapper

@inherits WizardBase<TenantForm>

@if (_plans != null)
{
    <Form Steps="@_steps"
          BackUrl="/global"
          ActiveStepIndex="@_activeStepIndex"
          Title="@(Id == null ? "Create Tenant" : "Edit Tenant")"
          OnClickBackButton="OnClickBackButton"
          OnClickContinueButton="OnClickContinueButtonAsync"
          OnClickSubmitButton="OnClickSubmitButtonAsync">
        @switch (_activeStepIndex)
        {
            case 0:
                <EditForm Model="@_model.TenantBasicForm">
                    <HorizonInput Label="Name" Placeholder="Company Name" @bind-Value="@_model.TenantBasicForm.Name"/>
                    <HorizonInput Label="Description" Placeholder="Description" @bind-Value="@_model.TenantBasicForm.Description"/>
                    <HorizonInput Label="Contact Email" Placeholder="Contact Email" @bind-Value="@_model.TenantBasicForm.ContactEmail"/>
                    <HorizonInput Label="Phone Number" Placeholder="Phone Number" @bind-Value="@_model.TenantBasicForm.PhoneNumber"/>
                    <HorizonInput Label="Website" Placeholder="Website" @bind-Value="@_model.TenantBasicForm.Website"/>
                </EditForm>
                break;
            case 1:
                <EditForm Model="@_model.TenantAddressForm">
                    <HorizonInput Label="Country" Placeholder="Country" @bind-Value="@_model.TenantAddressForm.Country"/>
                    <HorizonInput Label="City" Placeholder="City" @bind-Value="@_model.TenantAddressForm.City"/>
                    <HorizonInput Label="Address" Placeholder="Address" @bind-Value="@_model.TenantAddressForm.Address"/>
                    <HorizonInput Label="State" Placeholder="State" @bind-Value="@_model.TenantAddressForm.State"/>
                    <HorizonInput Label="Postal Code" Placeholder="Postal Code" @bind-Value="@_model.TenantAddressForm.PostalCode"/>
                </EditForm>
                break;
            case 2:
                <EditForm Model="@_model.TenantPlanForm">
                    <HorizonSelect Options="@_planSelector" Label="Plan Type" Placeholder="Type here" @bind-Value="_model.TenantPlanForm.Name" SelectetValue="@_planSelected"/>
                </EditForm>
                break;
            case 3:
                <EditForm Model="@_model.TenantLicensesForm">
                    <HorizonInput Label="Extra Licenses Amount" Placeholder="Extra Licenses Amount" @bind-Value="@_model.TenantLicensesForm.Amount"/>
                </EditForm>
                break;
            default:
                break;
        }
    </Form>
}else{
    <p>Loading...</p>
}

@code {
    private Tenant? tenant = new();
    private Subscription? subscription = new();
    private Plan? plan = new();
    private TenantForm _model = new();
    private string _planSelected;

    
    private IDictionary<string, bool> _steps = new Dictionary<string, bool>()
    {
        { "Basic Tenant Information", false },
        { "Address Tenant Information", false },
        { "Plan Selection", false },
        { "Add Extra Licenses", false },
    };
    
    List<Plan>? _plans = new();
    private IDictionary<string, string> _planSelector = new Dictionary<string, string>()
    {
        { "", "" },
    };

    protected override async Task OnInitializedAsync()
    {
        base.OnInitializedAsync();
        Http.DefaultRequestHeaders.Authorization = await _headerRepository.GetHeaderAsync();

        // Get all the plans using Http
        try
        {
            var response = await Http.GetAsync("api/plan").ConfigureAwait(false);
            response.EnsureSuccessStatusCode();

            var content = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
            _plans = JsonConvert.DeserializeObject<List<Plan>>(content);
            
            foreach (var plan in _plans)
            {
                _planSelector.Add(plan.Name, plan.Id.ToString());
            }
            
            // Remove all empty options from _planSelector
            _planSelector = _planSelector.Where(x => !string.IsNullOrWhiteSpace(x.Key)).ToDictionary(x => x.Key, x => x.Value);
        }
        catch (HttpRequestException e)
        {
            OpenModal("ErrorDetails", $"An error occurred while fetching plans: {e.Message}");

        }
        catch (Exception e)
        {
            OpenModal("ErrorDetails", $"An unexpected error occurred: {e.Message}");
        }
        
        // Map the plans to the _plans list
        
        if (Id.HasValue)
        {
            var resultTenant = await Http.GetAsync($"api/tenant/{Id.Value}");
            resultTenant.EnsureSuccessStatusCode();
            if (resultTenant.IsSuccessStatusCode)
            {
                var contentTenant = await resultTenant.Content.ReadAsStringAsync().ConfigureAwait(false);
                tenant = JsonConvert.DeserializeObject<Tenant>(contentTenant);
            }

            var resultSubscription = await Http.GetAsync($"api/subscription/tenant/{Id.Value}");
            resultSubscription.EnsureSuccessStatusCode();
            if (resultSubscription.IsSuccessStatusCode)
            {
                var contentSubscription = await resultSubscription.Content.ReadAsStringAsync().ConfigureAwait(false);
                subscription = JsonConvert.DeserializeObject<Subscription>(contentSubscription);
            }

            if (string.IsNullOrWhiteSpace(tenant?.Name))
            {
                // Open modal and display error
                OpenModal("ErrorDetails", "Tenant not found");
            }

            _model = Mapper.Map<TenantForm>(tenant);
            
            Console.WriteLine("The id of the subscription is: " + subscription?.Id.ToString() + " and contains extra amount of licenses: " + subscription.ExtraAmountOfLicenses);
            if (!string.IsNullOrWhiteSpace(subscription?.Id.ToString()))
            {
                plan = subscription.Plan;
                _model.TenantPlanForm.Name = plan?.Id.ToString() ?? "1";
                _model.TenantLicensesForm.Amount = subscription.ExtraAmountOfLicenses.ToString();
            }

            // Select the correct plan in _planSelector based on the plan of the tenant
            if (plan != null)
                _model.TenantPlanForm.Name = plan.Name;
        }
    }

    private void GenerateTenant()
    {
        _model.TenantLicensesForm.Amount = subscription.ExtraAmountOfLicenses.ToString();
            
        // Remove all empty plans from the _plans list
        _plans.RemoveAll(x => string.IsNullOrWhiteSpace(x.Name));
        _planSelector = _plans.ToDictionary(x => x.Name, x => x.Id.ToString());
            
        _model.TenantBasicForm.Name = "UteamUP Inc.";
        _model.TenantBasicForm.Description = "UteamUP Inc. is a company that provides a platform for managing projects and teams.";
        _model.TenantBasicForm.ContactEmail = "gisli@uteamup.com";
        _model.TenantBasicForm.PhoneNumber = "1234567";
        _model.TenantBasicForm.Website = "www.uteamup.com";

        _model.TenantAddressForm.Country = "Iceland";
        _model.TenantAddressForm.City = "Reykjavik";
        _model.TenantAddressForm.Address = "Skolavordustigur 12";
        _model.TenantAddressForm.State = "Capital Region";
        _model.TenantAddressForm.PostalCode = "101";

        _model.TenantPlanForm.Name = "My Premium Plan";
        _model.TenantPlanForm.Id = 1;
        _model.TenantLicensesForm.Amount = "10";
    }
    
    private async Task OnClickSubmitButtonAsync()
    {
        
        tenant = Mapper.Map<Tenant>(_model);
        _planSelected = _model.TenantPlanForm.Name;

        // Begin with check if Id was sent if so then we are in edit mode and should update the tenant
        if (Id.HasValue == false)
        {
            // Get the selected plan from the _planSelector
            var result = await Http.PostAsJsonAsync<Tenant>($"api/tenant/add/plan/{_planSelected}/extraLicenses/{_model.TenantLicensesForm.Amount}", tenant);

            if (result != null)
            {
                NavigationManager.NavigateTo("/global");
            }
            else
            {
                // Open modal and display error
                OpenModal("ErrorDetails", "Location was not created. Please try again.");
            }
        }
        else
        {
            // Get the plan from selection
            var tenantDto = Mapper.Map<TenantDto>(_model);
            
            var url = $"api/tenant/{Id.Value}/plan/{_planSelected}/extraLicenses/{_model.TenantLicensesForm.Amount}";
            var resultTenant = await Http.PutAsJsonAsync<TenantDto>(url, tenantDto);

            if (resultTenant.IsSuccessStatusCode == false)
            {
                OpenModal("ErrorDetails", "Something went wrong while trying to update tenant");
            }
            else
            {
                NavigationManager.NavigateTo("/global");
            }
        }
    }
    
    private void OpenModal(string ErrorTitle, string ErrorDetails)
    {
        var options = new ModalOptions()
        {
            DisableBackgroundCancel = true,
            HideCloseButton = false,
        };
        
        var parameters = new ModalParameters();
        parameters.Add(ErrorTitle, ErrorDetails);

        ModalService.Show<ErrorTenantModal>("Error", parameters, options);
    }
    
    private async Task OnClickContinueButtonAsync()
    {
        _steps[_steps.ElementAt(_activeStepIndex).Key] = true;
        _activeStepIndex = _activeStepIndex + 1;
    }

    private void OnClickBackButton()
    {
        _activeStepIndex = _activeStepIndex - 1;
    }

}